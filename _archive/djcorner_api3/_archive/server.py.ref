from txjsonrpc.web import jsonrpc
from twisted.web import server
from twisted.internet import reactor
from twisted.web.static import File
from twisted.web.server import Site
from twisted.web import resource

from dbaccess import *

import base64
import os

class API(jsonrpc.JSONRPC):
	def jsonrpc_echo(self,a):
		return a

	def jsonrpc_register(self,info):
		return register( info )

	def jsonrpc_get_chat_thread(self,userid, cid):
		return get_chat_thread_by_id( userid, cid )

	def jsonrpc_send_message(self,fid,tid,message):
		return send_message(fid, tid, message )

	def jsonrpc_get_matches(self,uid,sctl,sfilt,sids,paging):
		return get_matches_sprawlcat(uid,sctl,sfilt,sids,paging)

	def jsonrpc_get_profile(self,uid):
		return get_profile(uid)

	def jsonrpc_set_profile(self,uid,info):
		return set_profile(uid,info)

	def jsonrpc_delete_conversation(self,userid,cid):
		return delete_conversation(userid, cid)

	def jsonrpc_login(self,login_name, password, devToken):
		return login( login_name, password, devToken )

	def jsonrpc_update_location( self, userid, lat, long ):
		return update_location( userid, lat, long )

	def logout( id ):
        	return logout( id )
    
	def jsonrpc_get_conversations(self,uid,paging):
		return get_matches_sprawlid(uid,None,paging)

	def jsonrpc_get_contacts(self,uid,sortv,cid):
		return get_contacts(uid,sortv,cid)

	def jsonrpc_add_contact_emailtype(self,uid,fn,mn,ln,email):
		return add_contact_emailtype(uid,fn,mn,ln,email)
	
	def jsonrpc_add_contact_sprawltype(self,uid,sid,sortv):
		return add_contact_sprawltype(uid,sid,sortv)
	
	def jsonrpc_delete_contact(self,uid,sid):
		return delete_contact(uid,sid)
	
	def jsonrpc_get_events(self,uid):
		return get_events(uid)
	
	def jsonrpc_get_messages(self,uid):
		return get_messages(uid)
	
	def jsonrpc_delete_messages(self,uid,mids):
		return delete_messages(uid,mids)

	def jsonrpc_set_messages_read(self,uid,mids):
		return set_messages_read(uid,mids)

	def jsonrpc_check_status(self,uid):
		return check_status( uid )

	def jsonrpc_create_poll(self,uid,name,question,answer_type,radius_type,radius):
		return create_poll( uid, name, question, answer_type, radius_type, radius )

	def jsonrpc_get_polls(self,uid,pollkind ):
		return get_polls( uid, pollkind )
	
	def jsonrpc_get_poll(self,uid,pollid ):
		return get_poll( uid, pollid )
	
	def jsonrpc_answer_poll(self,uid,pollid,bool,rating, anon):
		return answer_poll( uid, pollid,bool,rating, anon)
	
	def jsonrpc_delete_poll(self, uid, pollid, pollkind ):
		return delete_poll( uid, pollid, pollkind )
	
	def jsonrpc_get_poll_response(self, uid, pollid, paging):
		return get_poll_response( uid, pollid, paging)

	def jsonrpc_get_matches_filter(self, uid, filter, paging):
		return get_matches_filter( uid, filter, paging )

	def jsonrpc_register_device(self, uid, devtoken ):
		return register_device( uid, devtoken )

class FormPage(resource.Resource):
    def render_GET(self, request):
        return '<html><body>NO!</form></body></html>'

    def render_POST(self, request):
	print request.args.keys()
	pic = request.args["photo"][0]
	name = request.args["name"][0]
	path = os.path.join( "images", name )
	print path
	f = open( path, 'w')
	f.write( pic )
	f.flush()
        return '<html><body>ok</body></html>'

# Create toplevel web resource...
parent = resource.Resource()

# Create post/upload part of the site...
upload = FormPage()
parent.putChild("upload", upload )

# Create static resources part of site...
staticfiles = File("images")
parent.putChild("static", staticfiles )

# Create jsonrpc api part of site...
api = API()
parent.putChild("api", api)

factory = Site(parent)
reactor.listenTCP(7088, factory )

print "INFO: Starting reactor..."

reactor.run()

